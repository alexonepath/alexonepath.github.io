<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://alexonepath.github.io/tag/devops/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://alexonepath.github.io/" rel="alternate" type="text/html" />
  <updated>2019-02-17T16:37:53+09:00</updated>
  <id>https://alexonepath.github.io/tag/devops/feed.xml</id>

  
  
  

  
    <title type="html">About alex | </title>
  

  
    <subtitle>About alexander</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Project</title>
      <link href="https://alexonepath.github.io/category/etc/etc-temp.html" rel="alternate" type="text/html" title="Project" />
      <published>2019-02-17T09:00:00+09:00</published>
      <updated>2019-02-17T09:00:00+09:00</updated>
      <id>https://alexonepath.github.io/category/etc/etc-temp</id>
      <content type="html" xml:base="https://alexonepath.github.io/category/etc/etc-temp.html">&lt;h3 id=&quot;블록체인-개발-프로젝트&quot;&gt;블록체인 개발 프로젝트&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;개발 환경&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;블록체인 : Golang, Dep,&lt;/li&gt;
  &lt;li&gt;Java Client : Java, Gradle, Swagger&lt;/li&gt;
  &lt;li&gt;Javascript Client : Javascript, Webpack&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;준비-사항&quot;&gt;준비 사항&lt;/h4&gt;
&lt;p&gt;블록체인 개발을 하기전 합의 알고리즘의 종류와 기존 블록체인에 대해 학습을 진행.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;합의 알고리즘의 종류&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PoW : 해쉬 파워가 높은 노드가 블록을 먼저 생성할 수 있는 확률이 높은 알고리즘이다.&lt;/li&gt;
  &lt;li&gt;PoS : 지분이 높은 노드의 난이도가 낮아서 블록을 먼저 생성할 수 있는 확률이 높은 알고리즘이다. (직접 민주주의)&lt;/li&gt;
  &lt;li&gt;DPoS : 지분을 특정 노드에게 위임하고 대표 노드들이 블록을 생성하고 합의하는 알고리즘이다. (간접 민주주의)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같이 크게 3개의 중요한 알고리즘으로 구분할 수 있으며, DPoS와 같은 대표 노드합의에서 일정 노드의 실패를 극복할 수 있는
대표적인 알고리즘이 PBFT(Practical Byzantine Fault Tolerance)이다. (n = 3f+1)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;분석 블록체인&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이더리움
    &lt;ul&gt;
      &lt;li&gt;데이터 구조분석 (Account, Tx)&lt;/li&gt;
      &lt;li&gt;Merkle Patricia Tree&lt;/li&gt;
      &lt;li&gt;주요 라이브러리 (otto, urfave.cli)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;xblockchain-개발&quot;&gt;&lt;a href=&quot;https://github.com/xbctechnologies/go-xblockchain&quot; target=&quot;_blank&quot;&gt;XBlockchain 개발&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;개발 단계&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Go 프로젝트 구조설계 및 의존성 관리툴 선정 (Dep)&lt;/li&gt;
  &lt;li&gt;데이터 구조설계
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/xbctechnologies/go-xblockchain/blob/master/xcommon/xtypes/account.go&quot; target=&quot;_blank&quot;&gt;Account&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/xbctechnologies/go-xblockchain/blob/master/xcommon/xtypes/validator.go&quot; target=&quot;_blank&quot;&gt;Validator&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/xbctechnologies/go-xblockchain/blob/master/xcommon/xtypes/transaction_payload_body_grproposal.go&quot; target=&quot;_blank&quot;&gt;Governance&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/xbctechnologies/go-xblockchain/tree/master/xcommon/xtypes&quot; target=&quot;_blank&quot;&gt;Tx 정의&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Protobuf : 각 클라이언트에서 트랜잭션 서명시 동일한 값을 얻기위해.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;XState 개발
    &lt;ul&gt;
      &lt;li&gt;트랜잭션 시뮬레이션 및 실행.&lt;/li&gt;
      &lt;li&gt;Validator Set 조회&lt;/li&gt;
      &lt;li&gt;Governance 적용.&lt;/li&gt;
      &lt;li&gt;XState 단계
        &lt;ul&gt;
          &lt;li&gt;CheckTx : 클라이언트 또는 다른 Peer로부터 전달받은 Tx 시뮬레이션 및 검증&lt;/li&gt;
          &lt;li&gt;BeginBlock : 합의된 블록에 대한 시작을 알림 (이전 블록 합의에 참여한 Validator 보상)&lt;/li&gt;
          &lt;li&gt;DeliverTx : 블록에 포함된 Tx 실행 (Disk 저장.)&lt;/li&gt;
          &lt;li&gt;EndBlock : 다음 블록 합의에 참여할 Validator Set 리턴&lt;/li&gt;
          &lt;li&gt;Commit : 새로운 Governance 적용 및 DB Commit 또는 Rollback&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;java-client-개발&quot;&gt;&lt;a href=&quot;https://github.com/xbctechnologies/xcube.java&quot; target=&quot;_blank&quot;&gt;Java Client 개발&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;XBlockchain 노드를 통하여 트랜잭션을 발생시키고 블록체인 상의 데이터를 조회하기 위한 Java Client Library이다.&lt;br /&gt;
Gradle의 멀티모듈 구조로 되어 있으며 노드와 통신을 위한 Core, 암호화 모듈, Swagger를 통한 테스트 모듈로 구분된다.&lt;br /&gt;
또한 코인이동 및 보상에 따른 각 블록 Height에서의 값이 정확한지를 테스트하기 위한 코드가 존재한다.&lt;br /&gt;
Maven Central에도 배포가 되어 있으며 아래의 사이트 등에서 xcube로 검색이 가능하다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://search.maven.org/search?q=xcube&quot; target=&quot;_blank&quot;&gt;Maven&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xbctechnologies/xcube.java/blob/master/xcube-core/src/main/java/com/xbctechnologies/core/apis/XCube.java&quot; target=&quot;_blank&quot;&gt;API List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;javascript-cli&quot;&gt;&lt;a href=&quot;https://github.com/xbctechnologies/xcube.js&quot; target=&quot;_blank&quot;&gt;Javascript CLI&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Javascript를 이용하여 XBlockchain 노드와 통신을 하기 위한 코드를 작성한다.&lt;br /&gt;
코드는 Webpack을 이용하여 압축되며 압축된 코드는 go-bindata를 이용하여 binary로 변경되고&lt;br /&gt;
해당 binary를 Go에서의 Javascript 분석기인 otto 라이브러리가 로드하여 자바스크립트를 사용할 수 있다.&lt;br /&gt;
Javascript는 단순히 입력과 출력을 담당하며 실제 XBlockchain 노드의 호출은 Bridge를 통하여 한다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>전성종</name>
        
        
      </author>

      

      
        <category term="devops" />
      

      
        <summary type="html">블록체인 개발 프로젝트 개발 환경 블록체인 : Golang, Dep, Java Client : Java, Gradle, Swagger Javascript Client : Javascript, Webpack</summary>
      

      
      
    </entry>
  
</feed>
