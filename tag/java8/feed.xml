<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://alexonepath.github.io/tag/java8/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://alexonepath.github.io/" rel="alternate" type="text/html" />
  <updated>2019-02-24T14:57:56+09:00</updated>
  <id>https://alexonepath.github.io/tag/java8/feed.xml</id>

  
  
  

  
    <title type="html">About alex | </title>
  

  
    <subtitle>About alexander</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Java New Feature</title>
      <link href="https://alexonepath.github.io/category/java/java-new-featue.html" rel="alternate" type="text/html" title="Java New Feature" />
      <published>2019-02-24T09:00:00+09:00</published>
      <updated>2019-02-24T09:00:00+09:00</updated>
      <id>https://alexonepath.github.io/category/java/java-new-featue</id>
      <content type="html" xml:base="https://alexonepath.github.io/category/java/java-new-featue.html">&lt;blockquote&gt;
  &lt;p&gt;Java7, 8의 새로운 특징을 알아본다.&lt;br /&gt;
Java8의 람다 컬렉션 처리에 대한 예제를 포함한다. (나중에)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;java7&quot;&gt;Java7&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Type Interface (다이아몬드 지시자)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Java7 이전코드&lt;/span&gt;
Map&amp;lt;String, String&amp;gt; map &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new HashMap&amp;lt;String, String&amp;gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Java7&lt;/span&gt;
Map&amp;lt;String, String&amp;gt; map &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new HashMap&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;swith에서 String 사용&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이전 버젼에서는 기본형과 열거형만 사용이 가능했지만 Java7부터 String도 사용이 가능하다.&lt;/li&gt;
  &lt;li&gt;본인은 if ~ else 구분이 많을 경우 switch문을 사용하는 코드가 깔끔하다고 생각하기에 환영하는 기능이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Automatic Resource Management&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Connection, Files, Stream 등과 같은 자원을 자동으로 회수하여준다.&lt;/li&gt;
  &lt;li&gt;Closeable 인터페이스를 구현한 경우 try내의 resource들에 대해 close를 수행해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Java7 이전코드 (finally에서 개발자가 close 호출 코드를 넣어줘야 했다.)&lt;/span&gt;
FileInputStream fis &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
try &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    fis &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new FileInputStream&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/tmp/temp.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; catch &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FileNotFoundException e&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    e.printStackTrace&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; finally &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fis &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; null&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        try &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            fis.close&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; catch &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;IOException e&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            e.printStackTrace&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Java7 (try 구문에 Closeable 인터페이스를 구현한 경우 close 메소드를 자동으로 호출한다.)&lt;/span&gt;
try &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FileInputStream fis &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new FileInputStream&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/tmp/temp.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; catch &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FileNotFoundException e&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    e.printStackTrace&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; catch &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;IOException e&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    e.printStackTrace&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;그외 추가사항&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Underscore in numeric literal : 숫자형에 언더스코어(“_”) 사용이 가능하다. ex) int num = 1_000;&lt;/li&gt;
  &lt;li&gt;향상된 예외처리 :
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;하나의 catch에 &quot;|&quot; 연산자로 여러개의 예외를 처리할 수 있다. ex) catch(예외1 | 예외2 | 예외3 e)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Multi Catch문에 사용된 예외들은 부모와 자식관계의 상속을 가져서는 안된다.&lt;/li&gt;
      &lt;li&gt;위와같은 상속관계가 있는 경우 부모예외를 이용하여 한번에 처리하자.&lt;/li&gt;
      &lt;li&gt;공통된 조상의 멤버변수 및 메서드만 사용가능 하다. (e.method() 호출했는데 해당 예외에는 없는 메서드일 수 있다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;G1 GC가 기본 가비지 컬렉터로 선택&lt;/li&gt;
  &lt;li&gt;그외
    &lt;ul&gt;
      &lt;li&gt;Binary Literals with Prefix “0b”&lt;/li&gt;
      &lt;li&gt;Java NIO 2.0&lt;/li&gt;
      &lt;li&gt;More Precise Rethrowing of Exception&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;java8-나중에-추가&quot;&gt;Java8 (나중에 추가)&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;스트림 API&lt;br /&gt;
메서드에 코드 전달 (메서드 레퍼런스와 람다)&lt;br /&gt;
인터페이스의 디폴트 메서&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;스트림 API&lt;/strong&gt;
스트림이란? 한번에 한개씩 만들어지는 연속적인 데이터 항목들의 모임.&lt;br /&gt;
프로그램은 입력 스트림에서 한개씩 읽어 들이며 출력 스트림으로 데이터를 한개씩 기록한다.&lt;br /&gt;
즉, 어떤 프로그램의 출력은 다른 프로그램의 입력 스트림이 될 수 있다. ex) 리눅스의 파이프&lt;/p&gt;

&lt;p&gt;장점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;스레드를 이용하지 않고도 멀티 코어를 활용할 수 있게됨.&lt;/li&gt;
  &lt;li&gt;작업을 고수준으로 추상화하여 일련의 스트림으로 만들어 처리할 수 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;List&amp;lt;String&amp;gt; list &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Arrays.asList&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a1&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;a2&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;b1&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;c2&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;c1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
list.stream&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    .filter&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s -&amp;gt; s.startsWith&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    .map&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;String::toUpperCase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    .sorted&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    .forEach&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;System.out::println&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>전성종</name>
        
        
      </author>

      

      
        <category term="java7" />
      
        <category term="java8" />
      
        <category term="java9" />
      

      
        <summary type="html">Java7, 8의 새로운 특징을 알아본다. Java8의 람다 컬렉션 처리에 대한 예제를 포함한다. (나중에)</summary>
      

      
      
    </entry>
  
</feed>
