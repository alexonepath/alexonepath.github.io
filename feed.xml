<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://alexonepath.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://alexonepath.github.io/" rel="alternate" type="text/html" /><updated>2018-12-27T16:28:39+09:00</updated><id>https://alexonepath.github.io/</id><title type="html">About alex</title><subtitle>About alexander</subtitle><entry><title type="html">Docker Compose</title><link href="https://alexonepath.github.io/category/docker/guide/guide-3-compose.html" rel="alternate" type="text/html" title="Docker Compose" /><published>2018-12-21T09:00:00+09:00</published><updated>2018-12-21T09:00:00+09:00</updated><id>https://alexonepath.github.io/category/docker/guide/guide-3-compose</id><content type="html" xml:base="https://alexonepath.github.io/category/docker/guide/guide-3-compose.html">&lt;blockquote&gt;
  &lt;p&gt;Docker Compose에 대한 설명과 사용법에 대해서 알아본다.&lt;br /&gt;
Docker Compose 란?&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;여러개의 컨테이너를 실행하기 위해 정의되는 툴이다.&lt;/li&gt;
    &lt;li&gt;YAML 파일을 이용하여 각 컨테이너를 정의한다.&lt;/li&gt;
    &lt;li&gt;단일 커맨드를 이용하여 정의한 compose 파일의 서비스들을 실행하거나 중지할 수 있다.&lt;/li&gt;
    &lt;li&gt;어플리케이션의 생명주기를 관리하기 위해 아래와 같은 기능을 제공한다.
      &lt;ul&gt;
        &lt;li&gt;start, stop, rebuild&lt;/li&gt;
        &lt;li&gt;실행중인 서비스들의 상태 확인&lt;/li&gt;
        &lt;li&gt;실행중인 서비스들의 로그 확인&lt;/li&gt;
        &lt;li&gt;서비스에서 일회성 명령실행&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;compose-예제&quot;&gt;Compose 예제&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;참여했던 블록체인 프로젝트를 이용하여 Compose 예제를 작성한다.&lt;/li&gt;
  &lt;li&gt;블록체인은 트랜잭션을 발생시키면 해당 트랜잭션이 최종적으로 블록에 포함되어 합의를 이룬후 처리된다.&lt;/li&gt;
  &lt;li&gt;트랜잭션의 처리 결과에 대해서 조회하는 API를 제공하게 되는데 이부분을 Redis를 이용하여 처리한다.&lt;/li&gt;
  &lt;li&gt;현재 프로젝트는 Redis와 연동하는 부분은 존재하지 않지만 결국 블록체인의 한계로 인해 기존의 솔루션들을 결합해야 할 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;소스코드 체크아웃&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 해당 프로제트에는 이미 Dockerfile이 존재한다.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/xbctechnologies/go-xblockchain.git xnode
&lt;span class=&quot;c&quot;&gt;# 테스트를 위한 keystore 압축해제&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unzip xnode/test/keystore.zip &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; xnode/ &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;xnode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;간단하게 2개의 서비스(Container)를 정의하는 간단한 Compose 파일을 작성한다.&lt;br /&gt;
해당 Compose 파일을 실행하면 2개의 컨테이너를 실행하게 된다.&lt;br /&gt;
해당 파일은 위에서 체크아웃한 디렉토리 안에 작성한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;docker-compose.yml 작성&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xnode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 현재 디렉토리의 Dockerfile을 이용하여 이미지를 빌드&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;7979:7979&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 컨테이너의 Port와 Host의 Port를 매핑&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--singlenet --rpcwhitelist * --verbosity 4 --keystore /go-xblockchain/keys/keystore --password /go-xblockchain/keys/password --validatorpassword /go-xblockchain/keys/val_password --unlock 0x51e5ae98cd821fa044d1eb49f03fb81a7acf3617,0xa809913b5a5193b477c51b4ba4aa0e1268ed6d13,0xdb0c9f45be6b121aaeef9e382320e0b156487b57 --validatoraddrlist 1T:0xdb0c9f45be6b121aaeef9e382320e0b156487b57&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/xnode:/root/xnode&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis:alpine&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Docker hub로부터 이미지를 다운로드&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Compose Command&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 서비스 시작 (-d : detached)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 서비스 정지&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose down

&lt;span class=&quot;c&quot;&gt;# 서비스 확인&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose ps

&lt;span class=&quot;c&quot;&gt;# 그외 커맨드 확인&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>전성종</name></author><category term="docker" /><summary type="html">Docker Compose에 대한 설명과 사용법에 대해서 알아본다. Docker Compose 란? 여러개의 컨테이너를 실행하기 위해 정의되는 툴이다. YAML 파일을 이용하여 각 컨테이너를 정의한다. 단일 커맨드를 이용하여 정의한 compose 파일의 서비스들을 실행하거나 중지할 수 있다. 어플리케이션의 생명주기를 관리하기 위해 아래와 같은 기능을 제공한다. start, stop, rebuild 실행중인 서비스들의 상태 확인 실행중인 서비스들의 로그 확인 서비스에서 일회성 명령실행</summary></entry><entry><title type="html">Docker Network</title><link href="https://alexonepath.github.io/category/docker/guide/guide-2-network.html" rel="alternate" type="text/html" title="Docker Network" /><published>2018-12-21T09:00:00+09:00</published><updated>2018-12-21T09:00:00+09:00</updated><id>https://alexonepath.github.io/category/docker/guide/guide-2-network</id><content type="html" xml:base="https://alexonepath.github.io/category/docker/guide/guide-2-network.html">&lt;blockquote&gt;
  &lt;p&gt;Docker에서 컨네이너가 사용하는 네트워크 방식에 대해서 알아본다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;docker-network-종류&quot;&gt;Docker Network 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Bridge
    &lt;ul&gt;
      &lt;li&gt;기본 네트워크 드라이버이고 Docker 설치후 Network Interface를 보면 docker0가 생긴것을 볼 수 있다.&lt;/li&gt;
      &lt;li&gt;컨테이너에 특정한 네트워크를 설정하지 않으면 Container의 interface가 하나씩 연결된다.&lt;/li&gt;
      &lt;li&gt;Container가 외부로 통신할 때는 docker0 interface를 거치게 된다.&lt;/li&gt;
      &lt;li&gt;docker0 인터페이스는 host의 eth0 인터페이스와 연결된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Host
    &lt;ul&gt;
      &lt;li&gt;host 방식은 컨테이너 생성시 독립적인 네트워크를 갖지 않고 host의 네트워크와 함께 사용하게 된다.&lt;/li&gt;
      &lt;li&gt;--net=host 옵션으로 컨테이너를 실행한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Overlay
    &lt;ul&gt;
      &lt;li&gt;Docker Swarm에 참여하는 Docker Daemon과 Swarm안의 서비스들 사이에 통신을 담당&lt;/li&gt;
      &lt;li&gt;물리적으로 나누어진 서버가 2대 있고 각 서버의 컨테이너끼리 통신을 하고자 하는 경우 통신을 할 수 없게된다. (포트포워딩을 통해 가능.)&lt;/li&gt;
      &lt;li&gt;이때 여러 서버를 하나의 네트워크로 구성해주는게 Overlay이다. (각 서버에서 실행된 컨네이너는 같은 Gateway와 IP 대역을 가지게 된다.)&lt;/li&gt;
      &lt;li&gt;&lt;span class=&quot;main&quot;&gt;Docker Swarm을 사용하고 물리적으로 분리된 노드에 실행중인 컨테이너 사이에 통신이 필요한 경우 사용.&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;macvlan
    &lt;ul&gt;
      &lt;li&gt;macvlan은 bridge가 없고 host의 물리장비인 eth0 하위에 여러개의 하위 인터페이스를 만들어서 여러개의 Mac 주소를 가지게한다.&lt;/li&gt;
      &lt;li&gt;하위 인터페이스에 컨테이너들이 연결되면서 VLAN 환경을 구성하게 된다.&lt;/li&gt;
      &lt;li&gt;즉, 하나의 네트워크 인터페이스 카드를 가상화 함으로써 여러개의 MAC 주소를 생성하여 사용한다.&lt;/li&gt;
      &lt;li&gt;macvlan 방식은 private, VEPA, Bridge, Passthru 4가지 방식이 있고, Docker에서는 Bridge 방식만 사용한다.&lt;/li&gt;
      &lt;li&gt;Bridge 방식은 Host와는 통신이 안되지만 하위 인터페이스와는 통신이 되는 방식이다.&lt;/li&gt;
      &lt;li&gt;&lt;span class=&quot;main&quot;&gt;높은 처리량과 CPU 사용량이 적은 장점이 있으므로 컨테이너 사이에 통신만 필요한 경우 사용.&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;none
    &lt;ul&gt;
      &lt;li&gt;모든 Netwoking을 사용하지 않는다.&lt;/li&gt;
      &lt;li&gt;none은 Docker Swarm 서비드들에 대해서는 사용불가 하다.&lt;/li&gt;
      &lt;li&gt;&lt;span class=&quot;main&quot;&gt;none으로 설정한 경우는 Custom 네트워크 드라이버를 만들어 사용하는 경웨 사용.&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;컨테이너-연결&quot;&gt;컨테이너 연결&lt;/h3&gt;
&lt;p&gt;도커가 컨테이너를 띄울때 해당 컨테이너는 내부IP를 가지게 되고, 새로 띄울때는 IP가 변경되게 된다.&lt;br /&gt;
예전에는 --link 옵션을 주어서 컨테이너를 연결하였으나 현재는 deprecated 상태이며, 제거될 것이다. &lt;a href=&quot;https://docs.docker.com/network/links/&quot; target=&quot;_blank&quot;&gt;참고&lt;/a&gt;&lt;br /&gt;
--link 옵션을 사용하는 대신 Docker의 Network 기능을 이용하여 처리한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;예제&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# network 생성&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network create ex-net

&lt;span class=&quot;c&quot;&gt;# network 확인&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# network 상세정보 확인&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network inspect ex-net

&lt;span class=&quot;c&quot;&gt;# 컨테이너 실행시 --network NETWORK-NAME 옵션을 추가한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 아래와 같이 같은 network로 설정을 하면 컨네이터 사이에 통신이 가능하다.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; mysql-container &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; ex-net mysql
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; ex-net apache

&lt;span class=&quot;c&quot;&gt;# 만약 MySQL 컨테이너를 띄우고 소스코드 내에서 MySQL 컨네이너에 접속할때는 아래와 같이 작성한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# jdbc:mysql://mysql-container:3306/test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Overlay 네트워크 예제&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# overlay 네트워크 생성 (docker swarm manager 노드에서 해야 한다.)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Docker Swarm은 manager노드와 worker 노드가 존재한다.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker swarm init
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network create &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; overlay ex-over

&lt;span class=&quot;c&quot;&gt;# 컨테이너 생성&lt;/span&gt;
docker service create &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; myservice &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; ex-over &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--replicas&lt;/span&gt; 3 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ubuntu sleep infinity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>전성종</name></author><category term="docker" /><summary type="html">Docker에서 컨네이너가 사용하는 네트워크 방식에 대해서 알아본다.</summary></entry><entry><title type="html">Docker를 이용하여 홈서버 구축</title><link href="https://alexonepath.github.io/category/docker/guide/container-1-home.html" rel="alternate" type="text/html" title="Docker를 이용하여 홈서버 구축" /><published>2018-12-21T09:00:00+09:00</published><updated>2018-12-21T09:00:00+09:00</updated><id>https://alexonepath.github.io/category/docker/guide/container-1-home</id><content type="html" xml:base="https://alexonepath.github.io/category/docker/guide/container-1-home.html">&lt;blockquote&gt;
  &lt;p&gt;Docker를 이용하여 아래의 환경들을 구축할 것이다.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;WebDav(Web Distributed Authoring and Versioning) : 웹서버를 저장소로 사용 (저장된 문서, 파일 읽기 및 편집가능.)&lt;/li&gt;
    &lt;li&gt;Transmission : 토렌트&lt;/li&gt;
    &lt;li&gt;Plex : 동영상 스트리밍 서버&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;webdav&quot;&gt;WebDAV&lt;/h3&gt;
&lt;p&gt;nginx를 이용하여 webdav 서버를 실행한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu:18.04
MAINTAINER alexonepath@gmail.com

ENV USERNAME &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
ENV USERPWD &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;

RUN apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; nginx nginx-extras apache2-utils

RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'server {\n\
listen 80 default_server;\n\
listen [::]:80 default_server;\n\
charset utf-8;\n\
location /webdav {\n\
alias /var/webdav;\n\
dav_methods     PUT DELETE MKCOL COPY MOVE;\n\
dav_ext_methods   PROPFIND OPTIONS;\n\
create_full_put_path  on;\n\
dav_access    user:rw group:rw all:rw;\n\
autoindex     on;\n\
auth_basic &quot;restricted&quot;;\n\
auth_basic_user_file /etc/nginx/users.pass;\n\
send_timeout  36000s;\n\
proxy_connect_timeout  36000s;\n\
proxy_read_timeout  36000s;\n\
proxy_send_timeout  36000s;\n\
proxy_request_buffering off;\n\
}}\n'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;  /etc/nginx/sites-available/webdav

RUN ln &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /etc/nginx/sites-available/webdav /etc/nginx/sites-enabled/webdav
RUN rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /etc/nginx/sites-enabled/default

RUN mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/webdav
RUN chown www-data /var/webdav &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 777 /var/webdav

COPY entrypoint.sh /
RUN chmod +x entrypoint.sh

CMD /entrypoint.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nginx &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;daemon off;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;entrypoint.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USERNAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USERPWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;htpasswd &lt;span class=&quot;nt&quot;&gt;-bc&lt;/span&gt; /etc/nginx/users.pass &lt;span class=&quot;nv&quot;&gt;$USERNAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USERPWD&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Done.
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;이미지 빌드 및 push&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;--tag&lt;/span&gt; seongjongjeon/webdav:1.0 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker login
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push seongjongjeon/webdav:1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;컨테이너 실행&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# volume 매핑을 위한 디렉토리 생성&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /data/repositories/docker-repository/webdav &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod 777 /data/repositories/docker-repository/webdav

&lt;span class=&quot;c&quot;&gt;###################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 1. 실행시 사용자 생성&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;###################&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; alex-webdav &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 20000:80 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /etc/localtime:/etc/localtime:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /data/repositories/docker-repository/webdav:/var/webdav &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;YOUR_NAME &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;USERPWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;YOUR_PWD &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
seongjongjeon/webdav:1.0

&lt;span class=&quot;c&quot;&gt;#####################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 2. 생성된 사용자 파일 매핑&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# USERNAME과 USERPWD 환경 변수가 없다면 users.pass 파일을 매핑해야 한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#####################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 사용자 생성하기&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;htpasswd &lt;span class=&quot;nt&quot;&gt;-bc&lt;/span&gt; users.passwd YOUR_NAME YOUR_PWD
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;htpasswd &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; users.passwd YOUR_NAME YOUR_PWD

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; alex-webdav &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 20000:80 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /etc/localtime:/etc/localtime:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /data/repositories/docker-repository/webdav:/var/webdav &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;YOUR_PASSWD_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:/etc/nginx/users.pass &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
seongjongjeon/webdav:1.0

&lt;span class=&quot;c&quot;&gt;# 실행중인 webdav에 사용자 추가&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONTAINER_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; htpasswd &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; /etc/nginx/users.pass YOUR_NAME YOUR_PWD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Mac 연결&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Finder 선택&lt;/li&gt;
  &lt;li&gt;메뉴(이동) &amp;gt; 서버에 연결 &amp;gt; http://도메인:port/webdav&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;transmission-토렌트&quot;&gt;Transmission (토렌트)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM linuxserver/transmission:95
MAINTAINER alexonepath@gmail.com

COPY entrypoint.sh /
RUN chmod +x entrypoint.sh
RUN rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /etc/services.d/transmission
CMD /entrypoint.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; /usr/bin/transmission-daemon &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; /config &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /watch &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;entrypoint.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USERNAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USERPWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/&quot;rpc-authentication-required&quot;: false/&quot;rpc-authentication-required&quot;: true/g'&lt;/span&gt; /config/settings.json
    sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/&quot;rpc-username&quot;: &quot;&quot;/&quot;rpc-username&quot;: &quot;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;/g'&lt;/span&gt; /config/settings.json
    sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/&quot;rpc-password&quot;: &quot;.*&quot;/&quot;rpc-password&quot;: &quot;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USERPWD&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;/g'&lt;/span&gt; /config/settings.json
    &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Done.
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;이미지 빌드 및 push&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;--tag&lt;/span&gt; seongjongjeon/transmission:95 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push seongjongjeon/transmission:95
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;컨테이너 실행&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; alex-transmission &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /etc/localtime:/etc/localtime:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /data/repositories/docker-repository/transmission/config:/config &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /data/repositories/docker-repository/transmission/download:/downloads &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /data/repositories/docker-repository/transmission/watch:/watch &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 20001:9091 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 51413:51413 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 51413:51413/udp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Asia/Seoul &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;YOUR_NAME &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;USERPWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;YOUR_PWD &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
seongjongjeon/transmission:95
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;plex-동영상-스트리밍-서버&quot;&gt;Plex (동영상 스트리밍 서버)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.plex.tv/claim&quot; target=&quot;_blank&quot;&gt;Obtain Claim token&lt;/a&gt; : plex 계정에 자동 로그인을 위한 토큰&lt;br /&gt;
&lt;strong&gt;컨테이너 실행 (접속 http://IP:20010)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /data는 transmission의 다운로드 폴더로 지정해 준다. &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; alex-plex &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 20010:32400/tcp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 20011:3005/tcp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 20012:8324/tcp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 20013:32469/tcp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 20014:1900/udp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 20015:32410/udp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 20026:32412/udp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 20027:32413/udp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 20028:32414/udp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /etc/localtime:/etc/localtime:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /data/repositories/docker-repository/plex/config:/config &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /data/repositories/docker-repository/plex/transcode:/transcode &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /data/repositories/docker-repository/transmission/download/complete:/data &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Asia/Seoul&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PLEX_CLAIM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;YOUR_PLEX_CLAIM &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
plexinc/pms-docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;영화 및 드라마 정보 Metadata Agent&lt;/strong&gt;&lt;br /&gt;
영화 및 드라마에 대한 메타정보를 받아온다. &lt;a href=&quot;https://github.com/hojel/DaumMovie.bundle&quot; target=&quot;_blank&quot;&gt;다운로드&lt;/a&gt;&lt;br /&gt;
플러그인 적용&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# plugins 디렉토리로 이동&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/data/repositories/docker-repository/plex/config/Library/Application Support/Plex Media Server/Plug-ins&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Checkout&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/hojel/DaumMovie.bundle.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;메인 화면의 라이브러리 추가 버튼클릭 (영화 또는 드라마가 등이 존재하는 폴더를 추가한다.)
&lt;img src=&quot;/assets/images/post/docker/container/2018-12-28-container-1-home/add_library.png&quot; alt=&quot;Add library&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;미디어 폴더 찾기 (Transmission의 다운로드 폴더를 /data 디렉토리에 매핑해 놓았으므로 해당 디렉토리 하위에 movie 폴더를 만들고 선택)
&lt;img src=&quot;/assets/images/post/docker/container/2018-12-28-container-1-home/select_directory.png&quot; alt=&quot;Folder&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;고급 선택후 에이전트를 Daum Movie 선택
&lt;img src=&quot;/assets/images/post/docker/container/2018-12-28-container-1-home/select_agent.png&quot; alt=&quot;Agent&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;그외 설정&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;자막 설정 (설정 &amp;gt; 언어)
&lt;img src=&quot;/assets/images/post/docker/container/2018-12-28-container-1-home/lang.png&quot; alt=&quot;Lang&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;라이브러리 설정 (설정 &amp;gt; 라이브러리)
&lt;img src=&quot;/assets/images/post/docker/container/2018-12-28-container-1-home/set_library.png&quot; alt=&quot;Set library&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;docker-compose-이용하여-설정&quot;&gt;Docker Compose 이용하여 설정&lt;/h3&gt;
&lt;p&gt;위의 3가지 컨테이너를 Docker Compose를 활용하여 한번에 컨트롤 할 수 있도록 한다.&lt;br /&gt;
WebDAV 및 Transmission의 경우는 이미지를 Docker Hub에 업로드 하였으므로 해당 이미지를 기반으로 컨테이너를 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;docker-compose.yml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;alex-webdav&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;seongjongjeon/webdav:1.0&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;alex-webdav&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime:ro&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/repositories/docker-repository/webdav:/var/webdav&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#- /data/deploy/docker/webdav/users.passwd:/etc/nginx/users.pass # 미리 생성한 계정파일을 매핑하는 경우.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20000:80&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;USERNAME=user_name&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;USERPWD=user_password&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;alex-transmission&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;seongjongjeon/transmission:95&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;alex-transmission&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime:ro&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/repositories/docker-repository/transmission/config:/config&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/repositories/docker-repository/transmission/download:/downloads&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/repositories/docker-repository/transmission/watch:/watch&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20001:9091&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;51413:51413&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;51413:51413/udp&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TZ=Asia/Seoul&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;USERNAME=YOUR_NAME&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;USERPWD=YOUR_PWD&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;alex-plex&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;plexinc/pms-docker&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;alex-plex&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;alex-transmission&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime:ro&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/repositories/docker-repository/plex/config:/config&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/repositories/docker-repository/plex/transcode:/transcode&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/repositories/docker-repository/transmission/download/complete:/data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20010:32400/tcp&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20011:3005/tcp&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20012:8324/tcp&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20013:32469/tcp&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20014:1900/udp&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20015:32410/udp&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20016:32412/udp&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20017:32413/udp&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20018:32414/udp&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TZ=Asia/Seoul&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PLEX_CLAIM=YOUR_CLAIM_TOKEN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Compose Start&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 기존 디렉토리 삭제&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /data/repositories/docker-repository/plex
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /data/repositories/docker-repository/transmission
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /data/repositories/docker-repository/webdav

&lt;span class=&quot;c&quot;&gt;# WebDAV 디렉토리 권한설정&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /data/repositories/docker-repository/webdav &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod 777 /data/repositories/docker-repository/webdav

&lt;span class=&quot;c&quot;&gt;# 서비스 시작&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 서비스 정지&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>전성종</name></author><category term="docker" /><summary type="html">Docker를 이용하여 아래의 환경들을 구축할 것이다. WebDav(Web Distributed Authoring and Versioning) : 웹서버를 저장소로 사용 (저장된 문서, 파일 읽기 및 편집가능.) Transmission : 토렌트 Plex : 동영상 스트리밍 서버</summary></entry><entry><title type="html">GA 적용</title><link href="https://alexonepath.github.io/category/etc/etc-ga.html" rel="alternate" type="text/html" title="GA 적용" /><published>2018-12-20T09:00:00+09:00</published><updated>2018-12-20T09:00:00+09:00</updated><id>https://alexonepath.github.io/category/etc/etc-ga</id><content type="html" xml:base="https://alexonepath.github.io/category/etc/etc-ga.html">&lt;blockquote&gt;
  &lt;p&gt;Google Analytics를 이용하여 운영중인 사이트의 사용자 접속 정보를 확인한다.&lt;br /&gt;
페이지뷰, 유입된 사용자 등등의 각종 지표를 확인할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;google-analytics-가입&quot;&gt;&lt;a href=&quot;https://marketingplatform.google.com/about/analytics/&quot; target=&quot;_blank&quot;&gt;Google Analytics 가입&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/post/etc/2018-12-20-etc-ga/ga-signup.png&quot; alt=&quot;Sing up&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-가입폼-작성&quot;&gt;1. 가입폼 작성&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/post/etc/2018-12-20-etc-ga/ga-register-form.png&quot; alt=&quot;Form&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-추적-id-및-태그&quot;&gt;2. 추적 ID 및 태그&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/post/etc/2018-12-20-etc-ga/ga-tracking.png&quot; alt=&quot;Get tracking id&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;일반 사이트의 경우는 범용 사이트 태그를 복사하여 head 태그 사이에 넣는다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>전성종</name></author><category term="ga" /><category term="google analytics" /><summary type="html">Google Analytics를 이용하여 운영중인 사이트의 사용자 접속 정보를 확인한다. 페이지뷰, 유입된 사용자 등등의 각종 지표를 확인할 수 있다.</summary></entry><entry><title type="html">Docker 기본개념</title><link href="https://alexonepath.github.io/category/docker/guide/guide-1-basic.html" rel="alternate" type="text/html" title="Docker 기본개념" /><published>2018-12-20T09:00:00+09:00</published><updated>2018-12-20T09:00:00+09:00</updated><id>https://alexonepath.github.io/category/docker/guide/guide-1-basic</id><content type="html" xml:base="https://alexonepath.github.io/category/docker/guide/guide-1-basic.html">&lt;blockquote&gt;
  &lt;p&gt;로컬, 개발, 운영에 대해서 모두 동일한 환경을 구성할 수 있다.&lt;br /&gt;
순간 트래픽이 증가하거나 하는 경우 새로운 서버에 Docker Engine만 설치하면 빠르게 환경 구축이 가능하다.&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;docker-기본개념&quot;&gt;Docker 기본개념&lt;/h3&gt;
&lt;p&gt;Dockerfile을 이용하여 자신만의 image를 생성하여 Docker Hub 또는 사내 Registry를 구성하여 push한다.&lt;br /&gt;
각 노드는 Registry로부터 이미지를 다운로드 받아서 격리된 컨테이너를 실행할 수 있다.&lt;br /&gt;
기존의 vm 같은 경우는 hypervisor가 hardware를 가상화하고 그위에 새로운 OS가 올라가는 구조이다.&lt;br /&gt;
하지만 Docker의 경우는 OS에 설치된 Docker Engine 위에 어플리케이션(OS 등등) 실행에 필요한 바이너리만 올라가는 구조이기 때문에&lt;br /&gt;
더 적은 자원을 사용할 뿐만 아니라 실행속도 또한 빠르다.&lt;/p&gt;

&lt;p&gt;KUBENETES, DOCKER SWARM, APACHE MESOS 등을 이용하여 컨테이너의 배포 관리를 할 수 있다.(Container Orchestration)&lt;br /&gt;
위의 3가지 솔루션들은 모두 여러 머신들의 자원을 Pool로써 관리하고 새로운 컨테이너가 배포되면 각 노드의 리소스 사용량에 따라&lt;br /&gt;
절적하게 컨테이너를 해당 머신에 배포하여 준다. (서버 자원을 효율적으로 사용할 수 있다.)
&lt;img src=&quot;/assets/images/post/docker/guide/2018-12-20-guide-basic/google-trend.png&quot; alt=&quot;Google trends&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;구글 트렌트 분석
    &lt;ul&gt;
      &lt;li&gt;&lt;span style=&quot;color:#5487eb&quot;&gt;kubenetes&lt;/span&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span style=&quot;color:#c74d40&quot;&gt;docker swarm&lt;/span&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span style=&quot;color:#e8b23f&quot;&gt;mesosphere&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p /&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;KUBENETES&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;DOCKER SWARM&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;APACHE MESOS&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;li&gt;Kubernetes의 배포 기본단위는 Pod이라 부른다.&lt;/li&gt;
        &lt;li&gt;각 Pod은 하나 또는 더많은 컨테이너로 구성된다.&lt;/li&gt;
        &lt;li&gt;Pod 안의 모든 컨테이너들은 같은 Host 상에서 스케쥴링 되고&lt;/li&gt;
        &lt;li&gt;localhost loopback 인터페이스를 통해 서로 통신할 수 있다.&lt;/li&gt;
        &lt;li&gt;스케쥴링 이란?&lt;/li&gt;
        &lt;li&gt;Pod 사용하는 리소스(CPU, Memory)에 따라 적절한 host를 선택하여 배정한다.&lt;/li&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;li&gt;Docker Compose 파일을 사용하여 정의한다.&lt;/li&gt;
        &lt;li&gt;Docker Swarm 클러스터에 리소스 사용량에 따라 배정한다.&lt;/li&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;li&gt;Mesos master가 각 agent의 지원을 관리한다.&lt;/li&gt;
        &lt;li&gt;Zookeeper를 이용하여 master 서버 문제시 standby를 leader로 승격&lt;/li&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>전성종</name></author><category term="docker" /><summary type="html">로컬, 개발, 운영에 대해서 모두 동일한 환경을 구성할 수 있다. 순간 트래픽이 증가하거나 하는 경우 새로운 서버에 Docker Engine만 설치하면 빠르게 환경 구축이 가능하다.</summary></entry><entry><title type="html">Jekyll 카테고리 및 페이징</title><link href="https://alexonepath.github.io/category/githubpage/jekyll/jekyll-3-category.html" rel="alternate" type="text/html" title="Jekyll 카테고리 및 페이징" /><published>2018-12-18T09:00:00+09:00</published><updated>2018-12-18T09:00:00+09:00</updated><id>https://alexonepath.github.io/category/githubpage/jekyll/jekyll-3-category</id><content type="html" xml:base="https://alexonepath.github.io/category/githubpage/jekyll/jekyll-3-category.html">&lt;blockquote&gt;
  &lt;p&gt;글들을 카테고리 별로 관리하기 위해 jekyll의 collection 기능 및 스크립트를 추가한다.&lt;br /&gt;
글목록의 페이징 처리를 하기 위한 간단한 스크립트 작성&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;_cnofigyml-추가&quot;&gt;_cnofig.yml 추가&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 카테고리정의 markdown 파일들이 위치할 디렉토리 이름. (프로젝트에 _categories 디렉토리 생성)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# html 페이지 생성&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/category/:path/&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 생성된 페이지의 URL 형식&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;category&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;category&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 카테고리 페이지 로딩시 사용할 Layout 페이지 (_layouts 폴더에 category.html 이용)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;카테고리-정의&quot;&gt;카테고리 정의&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;2depth의 카테고리가 가능하도록 정의할 것이다.&lt;/li&gt;
  &lt;li&gt;각 카테고리가 나타는 순서를 정의할 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/githubpage/jekyll/2018-12-18-jekyll-3-category-1.png&quot; alt=&quot;Category markdown&quot; height=&quot;200px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;카테고리 디렉토리 구조
    &lt;ul&gt;
      &lt;li&gt;1depth의 카테고리는 _categories 디렉토리 아래에 생성&lt;/li&gt;
      &lt;li&gt;2depth의 카테고리는 1depth의 파일명으로 디렉토리를 생성하고 해당 디렉토리 하위에 *.md 파일을 정의한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;카테고리 파일정의&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;&amp;lt;!-- 파일이름 githubpage.md (1Depth) --&amp;gt;
---
&lt;/span&gt;order: 1 &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- order 필드로 카테고리를 정렬 --&amp;gt;&lt;/span&gt;
title: Github Page &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 카테고리 이름 --&amp;gt;&lt;/span&gt;
name: githubpage &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 포스팅의 속할 카테고리를 지정할 때 사용 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;children: [jekyll] &amp;lt;!-- 해당 카테고리에 하위 카테고리로 정의할 카테고리 배열 --&amp;gt;
---
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;&amp;lt;!-- 파일이름 githubpage/jekyll.md (2Depth) --&amp;gt;
---
&lt;/span&gt;title: Jekyll
name: jekyll
&lt;span class=&quot;gh&quot;&gt;isSub: true
---
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;카테고리 트리생성 정의&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- _includes 폴더에 category.html 파일을 생성 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- {% include category.html %}와 같이 페이지에서 추가 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-wrapper&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color:#010F42;font-size:18px;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;카테고리&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-list accordion&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 1depth의 카테고리 정렬 --&amp;gt;&lt;/span&gt;
        {% assign sortedCategories = (site.categories | sort: &quot;order&quot;) %}
        {% for category in sortedCategories %}
            {% if category.isSub %}
                {% continue %}
            {% endif %}

            {% assign linkClass = '' %}
            {% assign toggleClass = '' %}
            {% assign menuUrl = category.url %}
            {% if category.children.size &amp;gt;= 1 %}
                {% assign menuUrl = 'javascript:;' %}
                {% assign linkClass = 'icon-plus' %}
                {% assign toggleClass = 'accordion-toggle' %}
            {% endif %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu{{ forloop.index }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toggle {{ toggleClass }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ category.url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ linkClass }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ menuUrl }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ category.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            {% if category.children.size &amp;gt;= 1 %}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-submenu accordion-content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                {% for child in category.children %}
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;head&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ category.url }}{{ child }}/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ child }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                {% endfor %}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
            {% endif %}
        {% endfor %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;카테고리 URL 페이지의 layout&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- _layouts 폴더에 category.html 파일을 생성 --&amp;gt;&lt;/span&gt;
---
layout: default
title: category
---
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page-content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content-layout&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                {% assign postCnt = 0 %}
                {% for post in site.posts %}
                    {% for category in post.categories %}
                        {% if page.name == category %}
                            {% assign postCnt = postCnt | plus: 1 %}
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;list-module&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.date | date: '%b %d %Y' }}, {{ site.data.authors[post.author].name }}
                      &lt;span class=&quot;c&quot;&gt;&amp;lt;!--new--&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.baseurl }}{{ site.data.authors[post.author].picture }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gravatar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.baseurl }}{{ post.permalink }}{{ post.url | remove_first: '/' }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-link&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-description&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.description }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                        {% endif %}
                    {% endfor %}
                {% endfor %}

                {% if postCnt == 0 %}
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text-align: center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;곧 포스팅될 예정입니다.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
                {% endif %}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;페이징-정의&quot;&gt;페이징 정의&lt;/h3&gt;
&lt;p&gt;_include 폴더에 pagenator.html 파일을 정의하였고 사용하는 페이지에서 include를 사용하여 추가.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
{% if paginator.total_pages &amp;gt; 1 %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pagination&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navigation&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 표시할 페이지 넘버 갯수 (홀수로 정의해야 함.) --&amp;gt;&lt;/span&gt;
        {% assign pageNums = 5 %}
        {% assign median = pageNums | divided_by: 2 %}
        {% assign tempStart = paginator.page | minus: median %}
        {% if tempStart &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;startPage =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;startPage =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tempStart&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;

        &lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tempEnd =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;paginator.page&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;divided_by:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tempEnd&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;endPage =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;startPage&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;plus:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pageNums&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;minus:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;endPage =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;paginator.page&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;plus:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;median&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;endPage&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; paginator.total_pages %}
            {% assign endPage = paginator.total_pages %}
        {% endif %}

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page-prev&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            {% if paginator.previous_page %}
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ paginator.previous_page_path }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sr-only&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;No Previous Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            {% else %}
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sr-only&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;No Previous Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            {% endif %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

        {% for page in (startPage..endPage) %}
            {% assign isActive = &quot;&quot; %}
            {% assign href = &quot;/page&quot; | append: page %}
            {% if page == 1 %}
                {% assign href = {{ paginator.previous_page_path | prepend: site.baseurl | replace: '//', '/' }} %}
            {% endif %}
            {% if page == paginator.page %}
                {% assign isActive = &quot;active&quot; %}
            {% endif %}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page-number {{ isActive }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ href }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ page }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        {% endfor %}

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page-next&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            {% if paginator.next_page %}
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ paginator.next_page_path }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sr-only&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Next Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            {% else %}
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sr-only&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Next Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            {% endif %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
{% endif %}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>전성종</name></author><category term="Jekyll" /><category term="jekyll" /><summary type="html">글들을 카테고리 별로 관리하기 위해 jekyll의 collection 기능 및 스크립트를 추가한다. 글목록의 페이징 처리를 하기 위한 간단한 스크립트 작성</summary></entry><entry><title type="html">Jekyll 빌드에서 배포까지</title><link href="https://alexonepath.github.io/category/githubpage/jekyll/jekyll-2-theme.html" rel="alternate" type="text/html" title="Jekyll 빌드에서 배포까지" /><published>2018-12-18T09:00:00+09:00</published><updated>2018-12-18T09:00:00+09:00</updated><id>https://alexonepath.github.io/category/githubpage/jekyll/jekyll-2-theme</id><content type="html" xml:base="https://alexonepath.github.io/category/githubpage/jekyll/jekyll-2-theme.html">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/category/githubpage/jekyll/jekyll-1-init.html&quot;&gt;이전 포스트&lt;/a&gt;에서는 로컬에서 서버를 띄워서 확인하였다.&lt;br /&gt;
이번 포스팅은 jasper2 테마 적용후 Github Page에 배포하는 방법까지 설명할 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;사전지식&quot;&gt;사전지식&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot;&gt;github.com&lt;/a&gt;에 Github Page를 운영할 저장소 및 빌드전 소스코드를 관리할 저장소를 생성한다.&lt;/li&gt;
  &lt;li&gt;Travis CI를 이용하여 소스코드가 Push 되면 Webhook을 이용하여 빌드 후 Github Page에 빌드된 파일을 Push 할 수 있다.&lt;/li&gt;
  &lt;li&gt;Travis CI의 과금은 오픈소스 프로젝트의 경우 무료로 사용할 수 있다. (본인은 Private Repository로 관리하므로 Makefile을 만들어서 사용한다.)&lt;/li&gt;
  &lt;li&gt;jasper2는 gulp를 이용하여 리소스들을 컴파일하도록 되어 있으므로, nodeJS 및 의존라이브러리들을 설치한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;github-repository-생성&quot;&gt;Github Repository 생성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;총2개의 저장소를 생성해야 한다.
    &lt;ul&gt;
      &lt;li&gt;소스코드 관리 저장소&lt;/li&gt;
      &lt;li&gt;Github Page에서 사용할 저장소 (Repository Name은 username.github.io 와 같이 생성해야 한다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jasper2-준비&quot;&gt;&lt;a href=&quot;https://github.com/jekyller/jasper2&quot; target=&quot;_blank&quot;&gt;jasper2&lt;/a&gt; 준비&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/jekyller/jasper2.git githubpage
&lt;span class=&quot;c&quot;&gt;# 소스코드를 받으면 package.json 파일에 의존성이 정의되어 있고 아래와 같이 다운로드 한다.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;코드 Highlight 설치&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install rouge
&lt;span class=&quot;c&quot;&gt;# 이용가능한 style 확인&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rougify &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;style
&lt;span class=&quot;c&quot;&gt;# 나열된 스타일 중 원하는 스타일의 css 파일 생성&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rougify style monokai.sublime &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; assets/css/syntax.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;구조-설명&quot;&gt;구조 설명&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/post/githubpage/jekyll/2018-12-17-jekyll-2-theme-1.png&quot; alt=&quot;Jekyll Project Structure&quot; height=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;_categories :&lt;/strong&gt; 카테고리 설정을 위한 *.md 파일들이 위치하는 디렉토리 (다음회에서 설명)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_data :&lt;/strong&gt; yaml, json, csv 파일들이 위치하는 디렉토리 (데이터를 저장해 놓고 호출하여 사용)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_draft :&lt;/strong&gt; 작성중인 포스트가 위치하는 디렉토리 (아직 온라인에 게시하지 않을 포스트)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_includes :&lt;/strong&gt; 재사용하기 위한 파일을 관리 다른 파일에서 해당 폴더에 있는 파일들을 포함할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_layouts :&lt;/strong&gt; index.html 또는 포스트 등등의 컨텐츠를 포장하기 위해 사용.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_plugins :&lt;/strong&gt; jekyll에서 사용할 플러그인을 설치한 디렉토리&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_posts :&lt;/strong&gt; 컨텐츠를 관리하는 디렉토리 (파일형식 : year-month-day-title.md)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;assets :&lt;/strong&gt; css, image, js 등의 리소를 관리하는 디렉토리&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;output :&lt;/strong&gt; jekyll 컴파일 후 생성되는 정적 파일들이 생성되는 위치. (기본값은 _site)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_config.yml :&lt;/strong&gt; 환경설정 정보 관리&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-서브모듈-추가&quot;&gt;Git 서브모듈 추가&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Github Page 저장소를 현재 저장소의 output 폴더에 서브모듈로 추가한다. (삭제는 좀 번거로움)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git submodule add https://github.com/alexonepath/alexonepath.github.io.git output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ide-설정하기-webstorm&quot;&gt;IDE 설정하기 (Webstorm)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Jekyll에서는 Liquid 문법을 사용해야 하는데 개발하기 편하도록 아래와 같이 설정을 한다.&lt;/li&gt;
  &lt;li&gt;Highlight 및 Reformat시 Liquid 문법이 적용되도록 하기.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;플러그인 설치 및 적용&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Twig 플러그인 설치 (Settings &amp;gt; Plugins &amp;gt; Browser repositories &amp;gt; Twig 검색 후 설치)&lt;/li&gt;
  &lt;li&gt;적용파일 추가 (Settings &amp;gt; Editor &amp;gt; File Types)
    &lt;ul&gt;
      &lt;li&gt;우측 (Recognized File Types) Twig 검색&lt;/li&gt;
      &lt;li&gt;Registered Patterns 아래의 2개 항목 추가&lt;/li&gt;
      &lt;li&gt;*.html, *.liquid&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Gulp Task&lt;/strong&gt;&lt;br /&gt;
Gulp에 정의된 Task 들이 나열되고 해당 항목을 더블클릭하면 Task가 실행된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/githubpage/jekyll/2018-12-17-jekyll-2-theme-2.png&quot; alt=&quot;Execute gulp&quot; height=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;설정파일-및-빌드파일-수정&quot;&gt;설정파일 및 빌드파일 수정&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kramdown&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Markdown 의 수정판&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;highlighter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rouge&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 문법 강조기로 rouge 사용 (위에서 설치함.)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;paginate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 페이지당 보여줄 아이템 갯수&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;en-uk'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Asia/Seoul'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;UTF-8'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Website info&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;About alex&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;About alexander&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;assets/images/blog-cover.jpg&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;logo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;assets/images/blog-icon.png&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;logo_dark&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;assets/images/favicon.png&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;favicon&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;assets/images/common/tiger.png&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 파비콘 파일위치&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://alexonepath.github.io&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Github Page URL&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;production_url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://alexonepath.github.io&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;source_url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/alexonepath/githubpage&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Github Page 빌드전 소스코드 저장소&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Disqus라는 댓글 서비스를 이용한다. (https://disqus.com/)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;disqus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;disqus_shortname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;alexanderpath&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# replace with your disqus username&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 각 Post의 주소방식을 어떻게 할 것인지 정의&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/:title&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# gems and other configs&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;plugins_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;jekyll-paginate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;jekyll-feed&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;jekyll-gist&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;feed.xml&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Travis CI 설정&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;safe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;lsi&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;alexonepath&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Travis의 username&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;githubpage&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 저장소 이름&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;relative_source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./output/&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 컴파일된 결과물(html)이 저장될 디렉토리 &lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;assets/css&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node_modules&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vendor&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.travis.yml&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Gemfile&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Gemfile.lock&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GHOST.txt&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gulpfile.js&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LICENSE&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;package.json&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Rakefile&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;README.md&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;script.py&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;changelog.md&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*.Rmd&quot;&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.git*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Rakefile&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#############################################################################&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Modified version of jekyllrb Rakefile&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# https://github.com/jekyll/jekyll/blob/master/Rakefile&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#############################################################################&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rake'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'date'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'yaml'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'_config.yml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;USERNAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;REPO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;repo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;SOURCE_BRANCH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;branch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;DESTINATION_BRANCH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;master&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;CNAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CNAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 이부분을 본인의 Github Page Repository URL 변경&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;GIT_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git@github.com:alexonepath/alexonepath.github.io.git&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_destination&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exist?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;destination&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&quot;start1&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git clone &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GIT_URL&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;destination&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:site&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Generate the site&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:build&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;check_destination&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundle exec jekyll build&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Generate the site and serve locally&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:serve&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;check_destination&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundle exec jekyll serve&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Generate the site, serve locally and watch for changes&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:watch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundle exec jekyll serve --watch&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Generate the site and push changes to remote origin&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deploy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Detect pull request&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'TRAVIS_PULL_REQUEST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Pull request detected. Not proceeding with deploy.'&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Configure git if this is run in Travis CI&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TRAVIS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git config --global user.name $GIT_NAME&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git config --global user.email $GIT_EMAIL&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git config --global push.default simple&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Make sure destination folder exists as git repo&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;check_destination&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git checkout &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SOURCE_BRANCH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;destination&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git checkout &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DESTINATION_BRANCH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Generate the site&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundle exec jekyll build&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Commit and push to github&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`git log`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[a-z0-9]{40}/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;destination&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# check if there is anything to add and commit, and pushes it&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;if [ -n '$(git status)' ]; then
            puts '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CNAME&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' &amp;gt; ./CNAME;
            git add --all .;
            git commit -m 'Updating to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;REPO&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.';
            git push -f &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GIT_URL&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DESTINATION_BRANCH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; --quiet ;
         fi&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pushed updated branch &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DESTINATION_BRANCH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to GitHub Pages&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Makefile&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-makefile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	git submodule update &lt;span class=&quot;nt&quot;&gt;--init&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--remote&lt;/span&gt;
	bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake site:deploy &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Done publishing.&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://alexonepath.github.io/&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;배포&quot;&gt;배포&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make publish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>전성종</name></author><category term="Jekyll" /><category term="jekyll" /><summary type="html">이전 포스트에서는 로컬에서 서버를 띄워서 확인하였다. 이번 포스팅은 jasper2 테마 적용후 Github Page에 배포하는 방법까지 설명할 것이다.</summary></entry><entry><title type="html">Jekyll 시작하기</title><link href="https://alexonepath.github.io/category/githubpage/jekyll/jekyll-1-init.html" rel="alternate" type="text/html" title="Jekyll 시작하기" /><published>2018-12-17T09:00:00+09:00</published><updated>2018-12-17T09:00:00+09:00</updated><id>https://alexonepath.github.io/category/githubpage/jekyll/jekyll-1-init</id><content type="html" xml:base="https://alexonepath.github.io/category/githubpage/jekyll/jekyll-1-init.html">&lt;blockquote&gt;
  &lt;p&gt;Jekyll(지킬) 이란?&lt;br /&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Jekyll은 간단하고, 확장 가능한 정적 사이트를 생성하기 위한 툴이다.&lt;/li&gt;
    &lt;li&gt;Ruby로 작성 되었으며, &lt;a href=&quot;https://shopify.github.io/liquid/&quot; target=&quot;_blank&quot;&gt;Liquid&lt;/a&gt; 템플릿 언어를 사용한다.&lt;/li&gt;
    &lt;li&gt;Github Page는 정적페이지를 서버 없이 홈페이지를 운영할 수 있도록해준다.&lt;/li&gt;
    &lt;li&gt;Jekyll을 이용하여 정적페이지를 생성하고, Github Page를 이용하여 서비스한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;github-page-사용이유&quot;&gt;Github Page 사용이유&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;블로그를 사용하는 것보다 markdown을 사용하여 빠르게 글을 작성할 수 있다.&lt;/li&gt;
  &lt;li&gt;IDE에 markdown 플러그인을 설치하면 글을 작성하면서 미리보기를 할 수 있다.&lt;/li&gt;
  &lt;li&gt;스타트업 기업의 경우 홈페이지를 운영하기 위해 따로 서버를 설치할 필요가 없음.&lt;/li&gt;
  &lt;li&gt;국내 유명 IT 기업들이 사용하고 있어서. (^^;;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;사전준비&quot;&gt;사전준비&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Mac에서 Ruby 설치&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xcode-select &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install rbenv ruby-build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'if which rbenv &amp;gt; /dev/null; then eval &quot;$(rbenv init -)&quot;; fi'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.profile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.profile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv install 2.5.1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv global 2.5.1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install bundler jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jekyll-프로젝트-생성-및-실행-접속&quot;&gt;jekyll 프로젝트 생성 및 실행 (&lt;a href=&quot;http://127.0.0.1:4000&quot; target=&quot;_blank&quot;&gt;접속&lt;/a&gt;)&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 기본 프로젝트 생성&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll new github-page
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;github-page

&lt;span class=&quot;c&quot;&gt;# 실행&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>전성종</name></author><category term="Jekyll" /><category term="jekyll" /><summary type="html">Jekyll(지킬) 이란? Jekyll은 간단하고, 확장 가능한 정적 사이트를 생성하기 위한 툴이다. Ruby로 작성 되었으며, Liquid 템플릿 언어를 사용한다. Github Page는 정적페이지를 서버 없이 홈페이지를 운영할 수 있도록해준다. Jekyll을 이용하여 정적페이지를 생성하고, Github Page를 이용하여 서비스한다.</summary></entry></feed>